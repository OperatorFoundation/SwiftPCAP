import XCTest
@testable import SwiftPCAP

import Foundation
import SwiftHexTools

func writeTestPCAP() {
  // PCAP data for simple 2 packet capture
  let testData: [UInt8] = [
    0xD4, 0xC3, 0xB2, 0xA1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xFF, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x32, 0x03, 0x56, 0x4B, 0xF0, 0x02, 0x00, 
    0x50, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0xC8, 0x83, 0x4F, 0xD3, 0xD7, 0x55, 0x7E, 0x09, 
    0x6F, 0x8A, 0x5E, 0x2B, 0x08, 0x00, 0x45, 0x00, 0x00, 0x42, 0x3B, 0x24, 0x00, 0x00, 0x40, 0x11, 
    0x50, 0x69, 0xFD, 0xF1, 0x10, 0x48, 0xC2, 0x04, 0x1E, 0xE0, 0xEF, 0x7D, 0x00, 0x35, 0x00, 0x2E, 
    0xE8, 0xC5, 0x04, 0xEE, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x73, 
    0x74, 0x61, 0x74, 0x69, 0x63, 0x03, 0x65, 0x73, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6C, 0x65, 0x03, 
    0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01, 0x28, 0x32, 0x03, 0x56, 0xE8, 0x2B, 0x03, 0x00, 
    0xB0, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x7E, 0x09, 0x6F, 0x8A, 0x5E, 0x2B, 0xC8, 0x83, 
    0x4F, 0xD3, 0xD7, 0x55, 0x08, 0x00, 0x45, 0x00, 0x00, 0xA2, 0x57, 0x1B, 0x00, 0x00, 0x3B, 0x11, 
    0x39, 0x12, 0xC2, 0x04, 0x1E, 0xE0, 0xFD, 0xF1, 0x10, 0x48, 0x00, 0x35, 0xEF, 0x7D, 0x00, 0x8E, 
    0x20, 0x8F, 0x04, 0xEE, 0x81, 0x80, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x06, 0x73, 
    0x74, 0x61, 0x74, 0x69, 0x63, 0x03, 0x65, 0x73, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6C, 0x65, 0x03, 
    0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01, 0xC0, 0x0C, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 
    0x00, 0xCD, 0x00, 0x22, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x03, 0x65, 0x73, 0x73, 0x05, 
    0x61, 0x70, 0x70, 0x6C, 0x65, 0x03, 0x63, 0x6F, 0x6D, 0x07, 0x65, 0x64, 0x67, 0x65, 0x6B, 0x65, 
    0x79, 0x03, 0x6E, 0x65, 0x74, 0x00, 0xC0, 0x32, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x3B, 0x31, 
    0x00, 0x16, 0x05, 0x65, 0x32, 0x30, 0x31, 0x33, 0x02, 0x65, 0x39, 0x0A, 0x61, 0x6B, 0x61, 0x6D, 
    0x61, 0x69, 0x65, 0x64, 0x67, 0x65, 0xC0, 0x4F, 0xC0, 0x60, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x09, 0x00, 0x04, 0x68, 0x47, 0x46, 0x7D
  ]
  // write it to a file
  let f: UnsafeMutablePointer = fopen("test.pcap", "w")
  fwrite(testData, 1, testData.count, f)
  fclose(f)
}

class SwiftPCAPTests: XCTestCase {
  
  func testInvalidOfflinePath() {
    XCTAssertThrowsError(try SwiftPCAP.Offline(path: "non-existent-file"))
  }
  
  func testFirstPacketUnsafe() {
//    writeTestPCAP()
//    do {
//      let cap = try SwiftPCAP.Offline(path: "test.pcap")
//      let l = cap.nextPacket()
//      XCTAssertEqual(Array(l), [                                                0xC8, 0x83, 0x4F, 0xD3, 0xD7, 0x55, 0x7E, 0x09,
//                                0x6F, 0x8A, 0x5E, 0x2B, 0x08, 0x00, 0x45, 0x00, 0x00, 0x42, 0x3B, 0x24, 0x00, 0x00, 0x40, 0x11,
//                                0x50, 0x69, 0xFD, 0xF1, 0x10, 0x48, 0xC2, 0x04, 0x1E, 0xE0, 0xEF, 0x7D, 0x00, 0x35, 0x00, 0x2E,
//                                0xE8, 0xC5, 0x04, 0xEE, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x73,
//                                0x74, 0x61, 0x74, 0x69, 0x63, 0x03, 0x65, 0x73, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6C, 0x65, 0x03,
//                                0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01])
//    } catch {
//      print("ERROR: \(error)")
//      XCTFail("problem running test file")
//    }
  }
  
  func testFirstPacket() {
//    writeTestPCAP()
//    do {
//      let cap = try SwiftPCAP.Offline(path: "test.pcap")
//      let l = cap.nextPacket()
//      XCTAssertEqual(l, [                                                0xC8, 0x83, 0x4F, 0xD3, 0xD7, 0x55, 0x7E, 0x09,
//                         0x6F, 0x8A, 0x5E, 0x2B, 0x08, 0x00, 0x45, 0x00, 0x00, 0x42, 0x3B, 0x24, 0x00, 0x00, 0x40, 0x11,
//                         0x50, 0x69, 0xFD, 0xF1, 0x10, 0x48, 0xC2, 0x04, 0x1E, 0xE0, 0xEF, 0x7D, 0x00, 0x35, 0x00, 0x2E,
//                         0xE8, 0xC5, 0x04, 0xEE, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x73,
//                         0x74, 0x61, 0x74, 0x69, 0x63, 0x03, 0x65, 0x73, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6C, 0x65, 0x03,
//                         0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01])
//    } catch {
//      print("ERROR: \(error)")
//      XCTFail("problem running test file")
//    }
  }

  func testSecondPacket() {
//    writeTestPCAP()
//    do {
//      let cap = try SwiftPCAP.Offline(path: "test.pcap")
//      var l = cap.nextPacket()
//      l = cap.nextPacket()
//      XCTAssertEqual(l, [                                                0x7E, 0x09, 0x6F, 0x8A, 0x5E, 0x2B, 0xC8, 0x83,
//                         0x4F, 0xD3, 0xD7, 0x55, 0x08, 0x00, 0x45, 0x00, 0x00, 0xA2, 0x57, 0x1B, 0x00, 0x00, 0x3B, 0x11,
//                         0x39, 0x12, 0xC2, 0x04, 0x1E, 0xE0, 0xFD, 0xF1, 0x10, 0x48, 0x00, 0x35, 0xEF, 0x7D, 0x00, 0x8E,
//                         0x20, 0x8F, 0x04, 0xEE, 0x81, 0x80, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x06, 0x73,
//                         0x74, 0x61, 0x74, 0x69, 0x63, 0x03, 0x65, 0x73, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6C, 0x65, 0x03,
//                         0x63, 0x6F, 0x6D, 0x00, 0x00, 0x01, 0x00, 0x01, 0xC0, 0x0C, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00,
//                         0x00, 0xCD, 0x00, 0x22, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x03, 0x65, 0x73, 0x73, 0x05,
//                         0x61, 0x70, 0x70, 0x6C, 0x65, 0x03, 0x63, 0x6F, 0x6D, 0x07, 0x65, 0x64, 0x67, 0x65, 0x6B, 0x65,
//                         0x79, 0x03, 0x6E, 0x65, 0x74, 0x00, 0xC0, 0x32, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x3B, 0x31,
//                         0x00, 0x16, 0x05, 0x65, 0x32, 0x30, 0x31, 0x33, 0x02, 0x65, 0x39, 0x0A, 0x61, 0x6B, 0x61, 0x6D,
//                         0x61, 0x69, 0x65, 0x64, 0x67, 0x65, 0xC0, 0x4F, 0xC0, 0x60, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
//                         0x00, 0x09, 0x00, 0x04, 0x68, 0x47, 0x46, 0x7D])
//    } catch {
//      print("ERROR: \(error)")
//      XCTFail("problem running test file")
//    }
  }
  
  func testEOF() {
    
  }

    func testMultipleCaptures()
    {
        for iteration in 0..<2
        {
            guard let pcap = try? SwiftPCAP.Live(interface: "eth0") else
            {
<<<<<<< HEAD
                XCTFail()
                return
            }

            for _ in 0..<100
            {
                guard let packet = pcap.nextPacket() else
                {
                    XCTFail()
                    return
                }
=======
              print("Bad init \(iteration)")
              XCTFail()
              return
            }

            for packetTry in 0..<4
            {
              if let packet = pcap.nextPacket()
              {
                print("Packet \(packet)")
              }
              else
              {
                print("Bad packet \(iteration) \(packetTry)")
              }
>>>>>>> 89120f7c765bb7716c6fb7bf707a65f3a710a5eb
            }

            pcap.close()
        }
    }
  
  static var allTests : [(String, (SwiftPCAPTests) -> () throws -> Void)] {
    return [
      ("testInvalidOfflinePath", testInvalidOfflinePath),
      ("testFirstPacket", testFirstPacket),
      ("testSecondPacket", testSecondPacket),
      ("testEOF", testEOF),
      ("testMultipleCaptures", testMultipleCaptures)
    ]
  }
}
